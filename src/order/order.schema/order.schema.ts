import { Schema, Document } from 'mongoose';

export const OrderSchema = new Schema(
  {
    userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    serviceType: { type: String, enum: ['food', 'laundry'], required: true },
    totalAmount: { type: Number, required: true },
    finalAmount: { type: Number, required: true }, // Final amount after discount and offers
    totalQuantity: { type: Number, default: 1 }, // Default to 1 if not provided
    address: { type: String, required: true },
    specialOffer: { type: Number, default: 0 }, // Percentage
    discount: { type: Number, default: 0 }, // Percentage
    subCategoryId: {
      type: Schema.Types.ObjectId,
      ref: 'Subcategory',
      required: true,
    },
    status: {
      type: String,
      enum: ['pending', 'in_progress', 'completed'],
      default: 'pending',
    },
    orderNumber: { type: String, unique: true, default: 0 },
    razorpayOrderId: { type: String }, // Order ID generated by Razorpay
    razorpayPaymentId: { type: String }, // Payment ID after successful payment
    razorpaySignature: { type: String }, // Signature used for verification
    paymentStatus: {
      type: String,
      enum: ['pending', 'paid', 'failed', 'refunded'],
      default: 'pending',
    },
  },
  { timestamps: true },
);

export interface Order extends Document {
  userId: string;
  orderNumber: string;
  serviceType: string;
  totalAmount: number;
  finalAmount: number;
  totalQuantity: number;
  address: string;
  specialOffer?: number;
  discount?: number;
  subCategoryId: string;
  status: string;
  razorpayOrderId?: string;
  razorpayPaymentId?: string;
  razorpaySignature?: string;
  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';
}
